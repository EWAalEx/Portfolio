@using Umbraco.Cms.Web.Common.PublishedModels;
@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage
@{
	Layout = null;
	var conversion = Model.TryConvertTo<IGenericSeo>();
    var metadata = conversion.Success ? conversion.Result : null;
    var metaModel = new MetadataViewModel
            {
                Title = metadata != null && !string.IsNullOrWhiteSpace(metadata.MetaTitle) ? metadata.MetaTitle : Model.Name,
                MetaDescription = metadata != null && !string.IsNullOrWhiteSpace(metadata.MetaDescription) ? metadata.MetaDescription : null,
                NoIndex = metadata != null && metadata.NoIndex ? true : false
            };
    //end of metadata
    //navigation
    var settingsPage = Umbraco.ContentAtRoot().FirstOrDefault(page => page.ContentType.Alias == "settings");
    var settingsConversion = settingsPage.TryConvertTo<Settings>();
    var settings = settingsConversion.Success ? settingsConversion.Result : null;
    var navModel = new NavigationViewModel
            {
                Title = settings != null ? settings.NavHeroTitle : null,
                Subtitle = settings != null ? settings.NavHeroSubtitle : null,
                BackgroundColour = settings != null ? settings.NavHeroBackgroundColour : null,
                BackgroundMedia = settings != null ? settings.NavHeroBackgroundContent : null,

                Links = new List<Link>(),
                ChildLinks1 = settings != null ? (settings.HeaderChildLinks1 != null ? settings.HeaderChildLinks1.ToList<Link>() : new List<Link>()) : new List<Link>(),
                ChildLinks2 = settings != null ? (settings.HeaderChildLinks2 != null ? settings.HeaderChildLinks2.ToList<Link>() : new List<Link>()) : new List<Link>(),
                ChildLinks3 = settings != null ? (settings.HeaderChildLinks3 != null ? settings.HeaderChildLinks3.ToList<Link>() : new List<Link>()) : new List<Link>(),
                ChildLinks4 = settings != null ? (settings.HeaderChildLinks4 != null ? settings.HeaderChildLinks4.ToList<Link>() : new List<Link>()) : new List<Link>(),
                ChildLinks5 = settings != null ? (settings.HeaderChildLinks5 != null ? settings.HeaderChildLinks5.ToList<Link>() : new List<Link>()) : new List<Link>(),
                HeadingChildrens = new List<bool>() { false, false, false, false, false },
                Email = settings != null ? settings.Email : null,
                SecondarySiteColour = settings != null ? settings.MainSiteColour : null,
                MainTextColour = settings != null ? settings.MainTextColour : null,
            };
    //check if header link fields are valid, if so concatinate them into a list for the cshtml
    Link parentLink1 = settings != null ? (settings.HeaderLink1 != null ? settings.HeaderLink1 : new Link()) : new Link();
    Link parentLink2 = settings != null ? (settings.HeaderLink2 != null ? settings.HeaderLink2 : new Link()) : new Link();
    Link parentLink3 = settings != null ? (settings.HeaderLink3 != null ? settings.HeaderLink3 : new Link()) : new Link();
    Link parentLink4 = settings != null ? (settings.HeaderLink4 != null ? settings.HeaderLink4 : new Link()) : new Link();
    Link parentLink5 = settings != null ? (settings.HeaderLink5 != null ? settings.HeaderLink5 : new Link()) : new Link();
    List<Link> parentLinksEnum = new List<Link>() { parentLink1, parentLink2, parentLink3, parentLink4, parentLink5 };

    foreach (var link in parentLinksEnum)
    {
        if (link != null && link.Url != null)
        {
            navModel.Links.Add(link);
        }
    }
    //checks child links exist for the headings
    if (navModel.ChildLinks1.Count > 0)
    {
        navModel.HeadingChildrens[0] = true;
    }

    if (navModel.ChildLinks2.Count > 0)
    {
        navModel.HeadingChildrens[1] = true;
    }

    if (navModel.ChildLinks3.Count > 0)
    {
        navModel.HeadingChildrens[2] = true;
    }

    if (navModel.ChildLinks4.Count > 0)
    {
        navModel.HeadingChildrens[3] = true;
    }

    if (navModel.ChildLinks5.Count > 0)
    {
        navModel.HeadingChildrens[4] = true;
    }
    //end of navigation
}
<!doctype html>
<html lang="en" id="top-of-site">
<head>
    <link href="~/frontend/css/global.css" rel="stylesheet" />
    <partial name="SEO/_Metadata" model="metaModel" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width">

    <script src="https://kit.fontawesome.com/6d07646ed8.js" crossorigin="anonymous"></script>
    <script type="module" src="~/frontend/scripts/main.js"></script>
</head>

<body>
    @*create nav*@
    <partial name="Navigation/_Navigation" model="navModel" />


    <main id="main-content">
        @RenderBody()
    </main>
</body>



</html>